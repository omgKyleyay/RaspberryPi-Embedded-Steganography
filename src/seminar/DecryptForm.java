/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package seminar;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author pontios
 */
public class DecryptForm extends javax.swing.JFrame {

    String hostPath, guestPath;
    public BufferedImage host, guest, encrypted;
    
    public DecryptForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHost = new javax.swing.JLabel();
        jGuest = new javax.swing.JLabel();
        btnDecryptImage = new javax.swing.JButton();
        btnSelectImage = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemSelectHostImage = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuTools = new javax.swing.JMenu();
        jMenuItemDecryptImage = new javax.swing.JMenuItem();

        jHost.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jHost.setText("Host Image");

        jGuest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jGuest.setText("Guest Image");

        btnDecryptImage.setText("Decrypt Image");
        btnDecryptImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptImageActionPerformed(evt);
            }
        });

        btnSelectImage.setText("Select Image");
        btnSelectImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectImageActionPerformed(evt);
            }
        });

        jMenuFile.setText("File");

        jMenuItemSelectHostImage.setText("Select Image");
        jMenuItemSelectHostImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectHostImageActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSelectHostImage);

        jMenuItemExit.setText("Exit");
        jMenuFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuFile);

        jMenuTools.setText("Tools");

        jMenuItemDecryptImage.setText("Decrypt Image");
        jMenuTools.add(jMenuItemDecryptImage);

        jMenuBar1.add(jMenuTools);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jHost, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDecryptImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jGuest, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jHost, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jGuest, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDecryptImage)
                    .addComponent(btnSelectImage))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectImageActionPerformed
        AESDecryption();
        showHost();
    }//GEN-LAST:event_btnSelectImageActionPerformed

    private void jMenuItemSelectHostImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectHostImageActionPerformed
        AESDecryption();
        showHost();
    }//GEN-LAST:event_jMenuItemSelectHostImageActionPerformed

    public void AESDecryption()
    {
        try
        {
            FileInputStream file = new FileInputStream(".\\aes encrypted image\\aes.png");
            FileOutputStream outStream = new FileOutputStream(".\\decrypted image\\dec.png");
            byte k[] = "AESIMGEncryption".getBytes();
            SecretKeySpec key = new SecretKeySpec(k,"AES");
            Cipher enc = Cipher.getInstance("AES");
            enc.init(Cipher.DECRYPT_MODE, key);
            CipherOutputStream cos = new CipherOutputStream(outStream,enc);
            byte[] buf = new byte[1024];
            int read;
            while ((read = file.read(buf)) != -1)
            {
                cos.write(buf,0,read);
            }
            file.close();
            outStream.flush();
            cos.close();
            //JOptionPane.showMessageDialog(null, "Successful Decryption");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }
    
    private void btnDecryptImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptImageActionPerformed
        
        Steganography s = new Steganography();
        BufferedImage dec = s.decrypt(hostPath,new Dimension(600,353));//need the dimensions of guest to decrypt 
        System.out.println("w="+dec.getWidth());
        System.out.println("h="+dec.getHeight());
        displayImage(dec,jGuest);
        jGuest.setText(null);
    }//GEN-LAST:event_btnDecryptImageActionPerformed

    private void displayImage(BufferedImage bi, JLabel lbl)
    {
        ImageIcon ic = new ImageIcon(bi);
        Image im = ic.getImage().getScaledInstance(lbl.getWidth(), lbl.getHeight(), BufferedImage.SCALE_SMOOTH);
        ic = new ImageIcon(im);                 
        lbl.setIcon(ic);
    }
    public void showHost()
    {
        File hostFile = null;
        FileFilter imageFilter = new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes());
        JFileChooser chooseHost = new JFileChooser();
        chooseHost.setFileFilter(imageFilter);
        chooseHost.setCurrentDirectory(new File("decrypted image"));
        chooseHost.addPropertyChangeListener(new PropertyChangeListener() 
        {
            public void propertyChange(PropertyChangeEvent evt) {
                JLabel preview;
                JPanel panel = new JPanel();
                BufferedImage p;
                if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY
                        .equals(evt.getPropertyName())) {
                    File f = (File) evt.getNewValue();
                    if (f == null) return;
                    try
                    {
                        hostPath = f.getPath();
                        System.out.println(hostPath);
                        p = ImageIO.read(f);
                        preview = new JLabel();
                        if (p.getHeight() > p.getWidth())
                            preview.setSize(new Dimension(150*p.getWidth()/p.getHeight(),150));
                        else
                            preview.setSize(new Dimension(150,150*p.getHeight()/p.getWidth()));
                        panel.add(preview);
                        chooseHost.setAccessory(preview);
                        System.out.println(preview.getSize());
                        displayImage(p,preview);
                    }
                    catch(Exception e)
                    {
                        
                    }
                } 
            }
        }) ;
        int result = chooseHost.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION)
            hostFile = chooseHost.getSelectedFile();
        try
        {
            host = ImageIO.read(hostFile);
            System.out.println(host.getWidth());
            System.out.println(host.getHeight());
            displayImage(host,jHost);
            jHost.setText(null);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecryptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecryptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecryptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecryptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DecryptForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecryptImage;
    private javax.swing.JButton btnSelectImage;
    private javax.swing.JLabel jGuest;
    private javax.swing.JLabel jHost;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemDecryptImage;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemSelectHostImage;
    private javax.swing.JMenu jMenuTools;
    // End of variables declaration//GEN-END:variables
}
